openapi: 3.0.3
info:
  title: Bank REST API
  version: 1.0.0
  description: |
    REST API для управления пользователями, банковскими картами и переводами.
    Аутентификация выполняется по JWT токенам, бизнес-ошибки возвращаются в едином формате `ErrorResponse`.
servers:
  - url: http://localhost:8080
    description: Локальный запуск
tags:
  - name: Authentication
    description: Операции аутентификации и обновления JWT токенов
  - name: Users
    description: Управление пользователями и их ролями
  - name: Cards
    description: Управление банковскими картами и лимитами
  - name: Transfers
    description: Переводы между картами и просмотр истории
paths:
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Аутентификация пользователя
      description: Возвращает пару access/refresh токенов по валидным учетным данным.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
            examples:
              default:
                value:
                  username: my.name
                  password: Secret123
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponseDto'
              examples:
                default:
                  value:
                    tokenType: Bearer
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                    refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                    expiresIn: 900
                    refreshExpiresIn: 604800
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/auth/refresh:
    post:
      tags: [Authentication]
      summary: Обновление JWT токенов
      description: Генерирует новую пару access/refresh токенов по действующему refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
            examples:
              default:
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      responses:
        '200':
          description: Токены обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users:
    post:
      tags: [Users]
      summary: Регистрация нового пользователя
      description: Создает учетную запись пользователя и назначает роли. Точка не требует аутентификации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
            examples:
              default:
                value:
                  email: my.email@example.com
                  username: my.name
                  password: Secret123
                  firstName: My
                  lastName: Name
                  roles: [USER]
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [Users]
      summary: Получение списка пользователей
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users/{id}:
    get:
      tags: [Users]
      summary: Получение пользователя по идентификатору
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Найденный пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users/{id}/status:
    patch:
      tags: [Users]
      summary: Обновление статуса пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusRequestDto'
            examples:
              default:
                value:
                  status: BLOCKED
      responses:
        '200':
          description: Статус обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users/{id}/roles:
    put:
      tags: [Users]
      summary: Назначение ролей пользователю
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRolesRequestDto'
            examples:
              default:
                value:
                  roles: [ADMIN, USER]
      responses:
        '200':
          description: Роли обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users/{userId}/cards:
    post:
      tags: [Cards]
      summary: Выпуск новой карты пользователю
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequestDto'
            examples:
              default:
                value:
                  cardNumber: '4111222233334444'
                  expirationDate: '2027-12-01'
                  initialBalance: 1000.00
      responses:
        '201':
          description: Карта выпущена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [Cards]
      summary: Получение карт пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CardStatus'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Список карт пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/cards/{cardId}:
    get:
      tags: [Cards]
      summary: Получение информации о карте
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags: [Cards]
      summary: Обновление данных карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequestDto'
            examples:
              default:
                value:
                  expirationDate: '2028-12-01'
                  status: BLOCKED
      responses:
        '200':
          description: Карта обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags: [Cards]
      summary: Удаление карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      responses:
        '204':
          description: Карта удалена
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/cards/{cardId}/status:
    patch:
      tags: [Cards]
      summary: Изменение статуса карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardStatusRequestDto'
            examples:
              default:
                value:
                  status: BLOCKED
      responses:
        '200':
          description: Статус обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/cards/{cardId}/transfers:
    get:
      tags: [Transfers]
      summary: История переводов карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      responses:
        '200':
          description: Список переводов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardTransferDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/cards/{cardId}/limits/daily:
    get:
      tags: [Cards]
      summary: Остаток суточного лимита переводов
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/OperatorIdHeader'
      responses:
        '200':
          description: Остаток лимита
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyLimitDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/transfers:
    post:
      tags: [Transfers]
      summary: Перевод между картами
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OperatorIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransferRequestDto'
            examples:
              default:
                value:
                  fromCardNumber: '4111222233334444'
                  toCardNumber: '5555666677778888'
                  amount: 1500.00
                  description: Rent payment
      responses:
        '201':
          description: Перевод выполнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransferDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    OperatorIdHeader:
      name: X-Operator-Id
      in: header
      required: true
      schema:
        type: integer
        format: int64
      description: Идентификатор оператора, от имени которого выполняется действие.
  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              value:
                status: 400
                error: Bad Request
                message: Validation failed
                path: /api/users
                validationErrors:
                  - field: email
                    message: Email must be valid
    Unauthorized:
      description: Требуется аутентификация
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                status: 401
                error: Unauthorized
                message: Full authentication is required to access this resource
                path: /api/users
    Forbidden:
      description: Доступ запрещён
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                status: 403
                error: Forbidden
                message: User 42 cannot manage cards of user 1
                path: /api/users/1/cards
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                status: 404
                error: Not Found
                message: "User not found: 99"
                path: /api/users/99
    Conflict:
      description: Конфликт данных
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                status: 409
                error: Conflict
                message: User with email already exists
                path: /api/users
    Unprocessable:
      description: Нарушение бизнес-правил
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            transferLimit:
              value:
                status: 422
                error: Unprocessable Entity
                message: Daily transfer limit of 50000.00 exceeded
                path: /api/transfers
                details:
                  allowedLimit: 50000.00
    ServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                status: 500
                error: Internal Server Error
                message: Unexpected error occurred
                path: /api/transfers
  schemas:
    LoginRequestDto:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 255
    RefreshTokenRequestDto:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
          description: Действующий refresh token
    JwtResponseDto:
      type: object
      required: [tokenType, accessToken, refreshToken, expiresIn, refreshExpiresIn]
      properties:
        tokenType:
          type: string
          example: Bearer
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          format: int64
          description: Время жизни access token в секундах
        refreshExpiresIn:
          type: integer
          format: int64
          description: Время жизни refresh token в секундах
    CreateUserRequestDto:
      type: object
      required: [email, username, password, roles]
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        username:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          minLength: 8
          maxLength: 255
        firstName:
          type: string
          maxLength: 100
          nullable: true
        lastName:
          type: string
          maxLength: 100
          nullable: true
        roles:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RoleType'
    UpdateUserStatusRequestDto:
      type: object
      required: [status]
      properties:
        status:
          $ref: '#/components/schemas/UserStatus'
    UpdateUserRolesRequestDto:
      type: object
      required: [roles]
      properties:
        roles:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RoleType'
    UserDto:
      type: object
      required: [id, email, username, status, roles]
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleType'
    CreateCardRequestDto:
      type: object
      required: [cardNumber, expirationDate, initialBalance]
      properties:
        cardNumber:
          type: string
          pattern: '^\\d{16}$'
        expirationDate:
          type: string
          format: date
        initialBalance:
          type: number
          format: double
    UpdateCardStatusRequestDto:
      type: object
      required: [status]
      properties:
        status:
          $ref: '#/components/schemas/CardStatus'
    UpdateCardRequestDto:
      type: object
      required: [expirationDate]
      properties:
        expirationDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/CardStatus'
    CardDto:
      type: object
      required: [id, maskedNumber, expirationDate, status, balance]
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
          pattern: '^\*{4} \*{4} \*{4} \\d{4}$'
        expirationDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/CardStatus'
        balance:
          type: number
          format: double
    CardPage:
      type: object
      required: [content, totalElements, totalPages, size, number]
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    CardTransferRequestDto:
      type: object
      required: [fromCardNumber, toCardNumber, amount]
      properties:
        fromCardNumber:
          type: string
          pattern: '^\\d{16}$'
        toCardNumber:
          type: string
          pattern: '^\\d{16}$'
        amount:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        description:
          type: string
          maxLength: 255
          nullable: true
    CardTransferDto:
      type: object
      required: [id, fromCardId, toCardId, amount, status, createdAt]
      properties:
        id:
          type: integer
          format: int64
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/TransferStatus'
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    DailyLimitDto:
      type: object
      required: [remaining]
      properties:
        remaining:
          type: number
          format: double
          description: Остаток доступного суточного лимита
    ErrorResponse:
      type: object
      required: [status, error, message, path]
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        details:
          type: object
          additionalProperties: {}
    ValidationError:
      type: object
      required: [field, message]
      properties:
        field:
          type: string
        message:
          type: string
    RoleType:
      type: string
      enum: [ADMIN, USER]
    UserStatus:
      type: string
      enum: [ACTIVE, BLOCKED, ARCHIVED]
    CardStatus:
      type: string
      enum: [ACTIVE, BLOCKED, EXPIRED, CLOSED]
    TransferStatus:
      type: string
      enum: [PENDING, COMPLETED, FAILED]